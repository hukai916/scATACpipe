// Import generic module functions
include { initOptions; saveFiles; getSoftwareName } from './functions'

params.options = [:]
options        = initOptions(params.options)

/*
 * Parse software version numbers
 */
process ARCHR_ADD_DOUBLETSCORES {
    label 'process_low'
    publishDir "${params.outdir}",
        mode: params.publish_dir_mode,
        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir: 'archr_add_doubletscores', publish_id:'') }

    // conda (params.enable_conda ? "conda-forge::python=3.8.3" : null)
    // if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {
    //     container "https://depot.galaxyproject.org/singularity/python:3.8.3"
    // } else {
    //     container "quay.io/biocontainers/python:3.8.3"
    // }

    // container "hukai916/bcl2fastq:2.20.0-centos7"
    container "hukai916/r_sc:0.5"

    // cache false

    input:
    val sample_name
    path arrowfile
    // path quality_control
    // val archr_genome
    // val archr_thread

    output:
    val sample_name, emit: sample_name
    path "doublet_qc_*", emit: qc
    path "*_doublet.arrow", emit: arrowfile
    path "report_*", emit: report
    path "summary_add_doubletscores_*.txt", emit: summary

    // path quality_control, emit: quality_control // if using this syntax, the -resume won't work
    // path "QualityControl", emit: quality_control // using this, the -resume won't work either.
    // This is because the quality_control folder content gets updated after each run, and it will be used as input for itself, so each time, it rerun, the timestamp of this folder is newer.
    // So, use doublet_qc to specifically store QC plots that are generated by this module.

    script:
    // for unknown reason, #!/usr/bin/R + direct R codes won't work
    """
    mkdir -p doublet_qc_$sample_name
    cp $arrowfile ${sample_name}_doublet.arrow # so that the original arrowfile doesn't get modified in place, this is to use the -resume option of nextflow

    echo '
    library(ArchR)

    addDoubletScores(
    input  = "${sample_name}_doublet.arrow",
    outDir = paste0("doublet_qc_", "$sample_name"),
    $options.args)
    ' > run.R

    Rscript run.R

    # Convert to jpeg:
    mkdir doublet_qc_$sample_name/jpeg
    x=( \$(find ./doublet_qc_$sample_name -name "*.pdf") )
    for item in "\${x[@]}"
    do
      filename=\$(basename -- "\$item")
      filename="\${filename%.*}"
      pdftoppm -jpeg -r 300 \$item ./doublet_qc_$sample_name/jpeg/\$filename
      convert -append ./doublet_qc_$sample_name/jpeg/\${filename}* ./doublet_qc_$sample_name/jpeg/\${filename}.jpg
      rm ./doublet_qc_$sample_name/jpeg/\${filename}-*.jpg
    done

    # For reporting:
    mkdir -p report_archr_add_doubletscores_$sample_name/archr_add_doubletscores
    cp -r doublet_qc_$sample_name/jpeg report_archr_add_doubletscores_$sample_name/archr_add_doubletscores
    cp .command.log summary_add_doubletscores_${sample_name}.txt

    """
}
