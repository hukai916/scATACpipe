/*
 * --------------------------------------------------
 *  Config file for defining DSL2 per module options
 * --------------------------------------------------
 *
 *   Available keys to override module options:
 *       args           = Additional arguments appended to command in module.
 *       args2          = Second set of arguments appended to command in module (multi-tool modules).
 *       publish_dir    = Directory to publish results.
 *       publish_by_id  = Publish results in separate folders by meta.id value.
 *       publish_files  = Groovy map where key = "file_ext" and value = "directory" to publish results for that file extension
 *                        The value of "directory" is appended to the standard "publish_dir" path as defined above.
 *                        If publish_files == null (unspecified)  - All files are published.
 *                        If publish_files == false               - No files are published.
 *       suffix         = File name suffix for output files.
 *
 */

params {
    modules {
        'fastqc' {
          args = '--quiet'
        }
        'multiqc' {
          args = ''
        }
        'get_10xgenomics_fastq' {
          args = ''
        }
        'get_biorad_fastq' {
          args = ''
        }
        'cellranger_index' {
          args = ''
        }
        'cellranger_atac_count' {
          args = '' // Don't put cpus or mem here
        }
        'correct_barcode' {
          args = ''
        }
        'correct_barcode_pheniqs' {
          args = ''
          read_count_cutoff = '10' // number of minimum reads to include certain barcode to valid barcode pool.
        }
        'match_reads' {
          args = ''
        }
        'match_reads_trimmed' {
          args = ''
        }
        'biorad_fastqc' {
          args = ''
        }
        'biorad_atac_seq_debarcode' {
          args = ''
        }
        'biorad_atac_seq_trim_reads' {
          args = ''
        }
        'biorad_atac_seq_bwa' {
          args = ''
        }
        'biorad_atac_seq_alignment_qc' {
          args = ''
        }
        'biorad_atac_seq_filter_beads' {
          args = ''
        }
        'add_barcode_to_reads' {
          args = ''
        }
        'cutadapt' {
          args = '--cores=0'
        }
        'download_from_ucsc' {
          args = ''
        }
        'download_from_ensembl' {
          args = ''
        }
        'bwa_index' {
          args = ''
        }
        'bwa_map' {
          args = ''
        }
        'minimap2_index' {
          args = ''
        }
        'minimap2_map' {
          args = ''
        }
        bam_filter {
          args = ''
        }
        remove_duplicate {
          args = '--barcode_regex "[^:]*"' // regular expression to extract cell barcode, must be quoted.
          // Other options available: --barcode_tag (retrive cell barcode from specified bam tab, default to "N/A")
          // Other options available: --shift_forward/--shift_reverse (shift the reads mapped to forward/reverse strand)
        }
        'qualimap' {
          args = ''
        }
        'get_fragments' {
          args = ''
        }
        'get_primary_genome' {
          args = ''
        }
        'download_from_ucsc_gtf' {
          args = ''
        }
        'download_from_ensembl_gtf' {
          args = ''
        }
        'fix_ucsc_gtf' {
          args = ''
        }

        // Below are for ArchR functions:
        'build_gene_annotation' {
          args = 'flank = 2000, promoterRange = c(upstream = 2000, downstream = 2000), filterChr = c("chrM", "chrY", "chrMT", "chrPltd")'
        }
        'build_genome_annotation' {
          args = 'blacklist_hasheader = FALSE, filterChr = c("chrM", "chrY", "chrMT", "chrPltd")'
        }
        'archr_get_annotation' {
          args = ''
        }
        'archr_get_annotation_bioc' {
          args = ''
        }
        'archr_create_arrowfiles' {
          args = 'minTSS = 4, minFrags = 100, addTileMat = TRUE, addGeneScoreMat = TRUE'
        }
        'archr_create_arrowfiles_annotation' {
          args = 'minTSS = 4, minFrags = 100, addTileMat = TRUE, addGeneScoreMat = TRUE'
        }
        'archr_add_doubletscores' {
          args = 'k = 10, knnMethod = "UMAP", LSIMethod = 1'
        }
        'archr_archrproject' {
          args = 'copyArrows = TRUE'
        }
        'archr_archrproject_annotation' {
          args = 'copyArrows = TRUE'
        }
        'archr_archrproject_qc' {
          args = ''
        }
        'archr_filter_doublets' {
          args = ''
        }
        'archr_dimension_reduction' {
          args = 'iterations = 2, clusterParams = list(resolution = c(0.2), sampleCells = 10000, n.start = 10), varFeatures = 25000, dimsToUse = 1:30'
        }
        'archr_batch_correction' {
          args = ''
        }
        'archr_clustering' {
          // args is for method Seurat
          args = 'resolution = 0.8'

          // args2 is for method scran
          args2 = 'k = 15'
        }
        'archr_embedding' {
          // args is for addUMAP
          args = 'nNeighbors = 30, minDist = 0.5, metric = "cosine"'

          // args2 is for addTSNE
          args2 = 'perplexity = 30'
        }
        'archr_marker_gene' {
          // args is for getMarkerFeatures
          args = 'useMatrix = "GeneScoreMatrix", groupBy = "Clusters", bias = c("TSSEnrichment", "log10(nFrags)"), testMethod = "wilcoxon"'

          // marker_genes is for marker genes
          marker_genes = '"CD34", "GATA1", "PAX5", "MS4A1", "EBF1", "MME", "CD14", "CEBPB", "MPO", "IRF8", "CD3D", "CD8A", "TBX21", "IL7R"'

          // args2 is for visualizing embeddin
          args2 = 'colorBy = "GeneScoreMatrix", embedding = "UMAP", quantCut = c(0.01, 0.95)'

          // args3 is for track plotting with ArchRBrowser
          args3 = 'groupBy = "Clusters", upstream = 50000, downstream = 50000'
        }
        'archr_scrnaseq_unconstrained' {
          args = 'useMatrix = "GeneScoreMatrix", matrixName = "GeneIntegrationMatrix", reducedDims = "IterativeLSI", addToArrow = TRUE, force = TRUE, groupRNA = "BioClassification"'

          marker_genes = '"CD34", "GATA1", "PAX5", "MS4A1", "CD14", "CD3D", "CD8A", "TBX21", "IL7R"'
        }
        'archr_scrnaseq_constrained' {
          marker_genes = '"CD34", "GATA1", "PAX5", "MS4A1", "CD14", "CD3D", "CD8A", "TBX21", "IL7R"'
        }
        'archr_pseudo_bulk' {
          args = ''
        }
        'archr_pseudo_bulk_clusters' {
          args = ''
        }
        'archr_pseudo_bulk_clusters2' {
          args = ''
        }
        'archr_call_peaks' {
          args = ''
        }
        'archr_call_peaks_clusters' {
          args = ''
        }
        'archr_call_peaks_clusters2' {
          args = ''
        }
        'archr_get_marker_peaks_clusters' {
          args = 'bias = c("TSSEnrichment", "log10(nFrags)"), testMethod = "wilcoxon"'

          // Note, must update function.nf initOptions by adding cutoff param.
          cutoff = 'FDR <= 0.01 & Log2FC >= 1'

        }
        'archr_get_marker_peaks_clusters2' {
          args = 'bias = c("TSSEnrichment", "log10(nFrags)"), testMethod = "wilcoxon"'
          cutoff = 'FDR <= 0.01 & Log2FC >= 1'
        }

        'archr_marker_peaks_in_tracks_clusters' {
          args = 'upstream = 50000, downstream = 50000'
          cutoff = 'FDR <= 0.01 & Log2FC >= 1'
        }

        'archr_marker_peaks_in_tracks_clusters2' {
          args = 'upstream = 50000, downstream = 50000'
          cutoff = 'FDR <= 0.01 & Log2FC >= 1'
        }
        'archr_pairwise_test_clusters' {
          args = 'testMethod = "wilcoxon", bias = c("TSSEnrichment", "log10(nFrags)")'
          cutoff = 'FDR <= 0.01 & Log2FC >= 1'
        }
        'archr_pairwise_test_clusters2' {
          args = 'testMethod = "wilcoxon", bias = c("TSSEnrichment", "log10(nFrags)")'
          cutoff = 'FDR <= 0.01 & Log2FC >= 1'
        }
        'archr_motif_enrichment_clusters' {
          // For addMotifAnnotations
          args = 'motifSet = "cisbp"'

          // for peakAnnoEnrichment
          cutoff = 'FDR <= 0.1 & Log2FC >= 0.5'
        }
        'archr_motif_enrichment_clusters2' {
          // For addMotifAnnotations
          args = 'motifSet = "cisbp"'

          // for peakAnnoEnrichment
          cutoff = 'FDR <= 0.1 & Log2FC >= 0.5'
        }
        'archr_motif_deviations_clusters' {
          args = 'motifSet = "cisbp"'
          motifs = '"GATA1", "CEBPA", "EBF1", "IRF4", "TBX21", "PAX5"'
        }
        'archr_motif_deviations_clusters2' {
          args = 'motifSet = "cisbp"'
          motifs = '"GATA1", "CEBPA", "EBF1", "IRF4", "TBX21", "PAX5"'
        }
        'archr_footprinting_clusters' {
          args = 'addDOC = FALSE, smoothWindow = 5'
          motifs = '"GATA1", "CEBPA", "EBF1", "IRF4", "TBX21", "PAX5"'
          norm_method = 'Subtract'
          tss_norm_method = 'None'
          tss_flank = 2000
          flank_norm = 100
        }
        'archr_footprinting_clusters2' {
          args = 'addDOC = FALSE, smoothWindow = 5'
          motifs = '"GATA1", "CEBPA", "EBF1", "IRF4", "TBX21", "PAX5"'
          norm_method = 'Subtract'
          tss_norm_method = 'None'
          tss_flank = 2000
          flank_norm = 100
        }
        'archr_coaccessibility_clusters' {
          args  = 'corCutOff = 0.5, resolution = 10000'
          marker_genes = '"CD34", "GATA1", "PAX5", "MS4A1", "CD14", "CD3D", "CD8A", "TBX21", "IL7R"'
        }
        'archr_coaccessibility_clusters2' {
          args  = 'corCutOff = 0.5, resolution = 10000'
          marker_genes = '"CD34", "GATA1", "PAX5", "MS4A1", "CD14", "CD3D", "CD8A", "TBX21", "IL7R"'
        }
        'archr_peak2genelinkage_clusters2' {
          args  = 'corCutOff = 0.45, resolution = 1000'
          marker_genes = '"CD34", "GATA1", "PAX5", "MS4A1", "CD14", "CD3D", "CD8A", "TBX21", "IL7R"'
        }
        'archr_get_positive_tf_regulator_clusters' {
          args  = ''
        }
        'archr_get_positive_tf_regulator_clusters2' {
          args  = ''
        }
        'archr_trajectory_clusters2' {
          // gene_to_color  = ''
          gene_to_color  = '"CEBPB"'
        }
        'archr_get_clustering_tsv' {
          args = ''
        }
        'split_bed' {
          args = ''
        }
        'split_bam' {
          bam_coverage = '--binSize 10 --normalizeUsing CPM --effectiveGenomeSize 1369631918' // For effectiveGenomeSize, see https://deeptools.readthedocs.io/en/develop/content/feature/effectiveGenomeSize.html
        }
    }
}
