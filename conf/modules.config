/*
 * --------------------------------------------------
 *  Config file for defining DSL2 per module options
 * --------------------------------------------------
 *
 *   Available keys to override module options:
 *       args           = Additional arguments appended to command in module.
 *       args2          = Second set of arguments appended to command in module (multi-tool modules).
 *       publish_dir    = Directory to publish results.
 *       publish_by_id  = Publish results in separate folders by meta.id value.
 *       publish_files  = Groovy map where key = "file_ext" and value = "directory" to publish results for that file extension
 *                        The value of "directory" is appended to the standard "publish_dir" path as defined above.
 *                        If publish_files == null (unspecified)  - All files are published.
 *                        If publish_files == false               - No files are published.
 *       suffix         = File name suffix for output files.
 *
 */

params { // do not forget to addParams() when including modules
    modules {
        'fastqc' {
          args = '--quiet'
        }
        'multiqc' {
          args = ''
        }
        'get_10xgenomics_fastq' {
          args = ''
        }
        'cellranger_index' {
          args = ''
        }
        'cellranger_atac_count' {
          args = '' // can be any natively support cellranger_atac_count flag
        }
        'get_whitelist_barcode' {
          args = ''
        }
        'correct_barcode' {
          args = ''
        }
        'correct_barcode_pheniqs' {
          read_count_cutoff = '10' // number of minimum reads to count as valid barcode
        }
        'match_reads' {
          args = ''
        }
        'match_reads_trimmed' {
          args = ''
        }
        'add_barcode_to_reads' {
          args = ''
        }
        'add_barcode_to_read_chunks' {
          args = ''
        }
        'cutadapt' {
          args = '--cores=0'
        }
        'download_from_ucsc' {
          args = ''
        }
        'download_from_ensembl' {
          args = ''
        }
        'bwa_index' {
          args = ''
        }
        'bwa_map' {
          args = ''
        }
        'filter_bam' {
          args = ''
        }
        'tag_bam' {
          args = ''
        }
        'dedup_bam' {
          args = '--extend_softclip 1' // whether or not to extend soft clips before deduplicating, set to 0 to not extend.
        }
        'dedup_bam2' {
          args = ''
        }
        'qualimap' {
          args = ''
        }
        'get_fragments' {
          args = '--shift_plus 4 --shift_minus -5'
        }
        'download_from_ucsc_gtf' {
          args = ''
        }
        'download_from_ensembl_gtf' {
          args = ''
        }
        'chromap_index' {
          args = ''
        }
        'frag_to_freq' {
          args = ''
        }
        'chromap_atac' {
          args = ''
        }
        'get_valid_barcode' {
          args = '--cutoff_sd 2'
        }
        'get_valid_barcode_chromap' {
          args = '--cutoff_sd 2'
        }
        'amulet_detect_doublets' {
          args = '--expectedoverlap 2 --maxinsertsize 2000'
        }
        // Below are for ArchR functions:
        'build_gene_annotation' {
          args = 'flank = 2000, promoterRange = c(upstream = 2000, downstream = 2000), filterChr = c("chrM", "chrY", "chrMT", "chrPltd")'
        }
        'build_genome_annotation' {
          args = 'blacklist_hasheader = FALSE, filterChr = c("chrM", "chrY", "chrMT", "chrPltd")'
        }
        'archr_get_annotation' {
          args = ''
        }
        'archr_get_annotation_bioc' {
          args = ''
        }
        'archr_create_arrowfiles' {
          args = 'minTSS = 4, minFrags = 1000, addTileMat = TRUE, addGeneScoreMat = TRUE'
        }
        'archr_create_arrowfiles_annotation' {
          args = 'minTSS = 4, minFrags = 1000, addTileMat = TRUE, addGeneScoreMat = TRUE'
        }
        'archr_add_doubletscores' {
          args = 'k = 10, knnMethod = "UMAP", LSIMethod = 1'
        }
        'archr_archrproject' {
          args = 'copyArrows = TRUE'
        }
        'archr_archrproject_annotation' {
          args = 'copyArrows = TRUE'
        }
        'archr_archrproject_qc' {
          args = ''
        }
        'archr_filter_cells' {
          args = 'TSSEnrichment >= 10, nFrags > 3000' // must separate by comma
        }
        'archr_filter_doublets' {
          archr_filter_doublets_ratio = 1.0
        }
        'archr_dimension_reduction' {
          args = 'iterations = 2, clusterParams = list(resolution = c(0.2), sampleCells = 10000, n.start = 10), varFeatures = 25000, dimsToUse = 1:30'
        }
        'archr_batch_correction' {
          args = ''
        }
        'archr_clustering' {
          // args is for method Seurat
          args = 'resolution = 0.7'

          // args2 is for method scran
          args2 = 'k = 15'
        }
        'archr_embedding' {
          // args is for addUMAP
          args = 'nNeighbors = 30, minDist = 0.5, metric = "cosine"'

          // args2 is for addTSNE
          args2 = 'perplexity = 30'
        }
        'archr_marker_gene_clusters' {
          // args is for ArchR::getMarkerFeatures()
          args = 'useMatrix = "GeneScoreMatrix", bias = c("TSSEnrichment", "log10(nFrags)"), testMethod = "wilcoxon"'

          // getMarkers_cutoff is for ArchR::getMarkers()
          getMarkers_cutoff = 'cutOff = "FDR <= 0.01 & Log2FC >= 1"'

          // marker_genes is for plotting marker genes
          marker_genes = 'default' // by default, the first 3 will be plotted, customized example see below:
          //marker_genes = 'CD34, GATA1, PAX5, MS4A1, EBF1, MME, CD14, CEBPB, MPO, IRF8, CD3D, CD8A, TBX21, IL7R'

          // args2 is for visualizing embedding
          args2 = 'colorBy = "GeneScoreMatrix", quantCut = c(0.01, 0.95)'

          // args3 is for track plotting with ArchR::ArchRBrowser()
          args3 = 'upstream = 50000, downstream = 50000'
        }
        'archr_marker_gene_clusters2' {
          // args is for getMarkerFeatures
          args = 'useMatrix = "GeneScoreMatrix", bias = c("TSSEnrichment", "log10(nFrags)"), testMethod = "wilcoxon"'

          // marker_genes is for marker genes
          marker_genes   = 'default' // by default, the first 3 will be plotted, customized example see below:
          //marker_genes = 'CD34, GATA1, PAX5, MS4A1, EBF1, MME, CD14, CEBPB, MPO, IRF8, CD3D, CD8A, TBX21, IL7R'

          // args2 is for visualizing embedding
          args2 = 'colorBy = "GeneScoreMatrix", quantCut = c(0.01, 0.95)'

          // args3 is for track plotting with ArchRBrowser
          args3 = 'upstream = 50000, downstream = 50000'
        }
        'archr_scrnaseq_unconstrained' {
          // args = 'groupRNA = "BioClassification"' // alternative: cell_type
          group_rna = 'BioClassification'
          marker_genes = 'default'
        }
        'archr_scrnaseq_constrained' {
          group_rna = 'BioClassification' // must be the same as in archr_scrnaseq_unconstrained
          marker_genes = 'default'
          // marker_genes = 'CD34, GATA1, PAX5, MS4A1, CD14, CD3D, CD8A, TBX21, IL7R'
        }
        'archr_pseudo_bulk' {
          args = ''
        }
        'archr_pseudo_bulk_clusters' {
          args = ''
        }
        'archr_pseudo_bulk_clusters2' {
          args = ''
        }
        'archr_call_peaks' {
          args = ''
        }
        'archr_call_peaks_clusters' {
          args = ''
        }
        'archr_call_peaks_clusters2' {
          args = ''
        }
        'archr_get_marker_peaks_clusters' {
          args = 'bias = c("TSSEnrichment", "log10(nFrags)"), testMethod = "wilcoxon"'
          getMarkers_cutoff = 'cutOff = "FDR <= 0.01 & Log2FC >= 1"'
        }
        'archr_get_marker_peaks_clusters2' {
          args = 'bias = c("TSSEnrichment", "log10(nFrags)"), testMethod = "wilcoxon"'
          cutoff = 'FDR <= 0.01 & Log2FC >= 1'
        }

        'archr_marker_peaks_in_tracks_clusters' {
          marker_genes   = 'default' // by default, the first 3 will be plotted, customized example see below:
          // marker_genes = 'CD34, GATA1, PAX5, MS4A1, EBF1, MME, CD14, CEBPB, MPO, IRF8, CD3D, CD8A, TBX21, IL7R'
          cluster_name   = 'default' // by default, the first cluster will be used, can pass in cluster names:
          // cluster_name = 'C1'

          args = 'upstream = 50000, downstream = 50000'
          getMarkers_cutoff = 'cutOff = "FDR <= 0.01 & Log2FC >= 1"'
        }

        'archr_marker_peaks_in_tracks_clusters2' {
          marker_genes   = 'default' // by default, the first 3 will be plotted, customized example see below:
          // marker_genes = 'CD34, GATA1, PAX5, MS4A1, EBF1, MME, CD14, CEBPB, MPO, IRF8, CD3D, CD8A, TBX21, IL7R'
          cluster_name   = 'default' // by default, the first cluster will be used, can pass in cluster names:
          // cluster_name = 'C1'

          args = 'upstream = 50000, downstream = 50000'
          getMarkers_cutoff = 'cutOff = "FDR <= 0.01 & Log2FC >= 1"'
        }
        'archr_pairwise_test_clusters' {
          args = 'testMethod = "wilcoxon", bias = c("TSSEnrichment", "log10(nFrags)")'
          cutoff = 'cutOff = "FDR <= 0.01 & Log2FC >= 1"'
          use_groups = 'default' // by default, the first cluster in clustering result will be used
          bgd_groups = 'default'
          // use_groups = 'C1'
          // bgd_groups = 'C2'
        }
        'archr_pairwise_test_clusters2' {
          args = 'testMethod = "wilcoxon", bias = c("TSSEnrichment", "log10(nFrags)")'
          cutoff = 'cutOff = "FDR <= 0.01 & Log2FC >= 1"'
          use_groups = 'default' // by default, the first cluster in clustering result will be used
          bgd_groups = 'default'
          // use_groups = 'C1'
          // bgd_groups = 'C2'
        }
        'archr_motif_enrichment_clusters' {
          // For addMotifAnnotations
          args = 'motifSet = "cisbp"'
            // if 'custom', must provide custom PWMatrixList using 'motifPWMs' params, e.g. 'motifSet = "cisbp", motifPWMs = "full_path_to_PWMatrixList"'
            // on how to create PWMatrixList: https://github.com/hukai916/scATACpipe_example/tree/main/PWMatrixList

          // for peakAnnoEnrichment
          cutoff = 'cutOff = "FDR <= 0.01 & Log2FC >= 1"'
        }
        'archr_motif_enrichment_clusters2' {
          // For addMotifAnnotations
          args = 'motifSet = "cisbp"'
            // if 'custom', must provide custom PWMatrixList using 'motifPWMs' params, e.g. 'motifSet = "cisbp", motifPWMs = "full_path_to_PWMatrixList"'
            // on how to create PWMatrixList: https://github.com/hukai916/scATACpipe_example/tree/main/PWMatrixList

          // for peakAnnoEnrichment
          cutoff = 'cutOff = "FDR <= 0.01 & Log2FC >= 1"'
        }
        'archr_motif_deviations_clusters' {
          args = 'motifSet = "cisbp"'
            // if 'custom', must provide custom PWMatrixList using 'motifPWMs' params, e.g. 'motifSet = "cisbp", motifPWMs = "full_path_to_PWMatrixList"'
            // on how to create PWMatrixList: https://github.com/hukai916/scATACpipe_example/tree/main/PWMatrixList

          motifs = 'default'
          // motifs = 'SPIB_336, SPI1_322, CEBPA_155, FOSL1_142, JUNB_139'

          custom_peaks = 'default'
          // custom_peaks = 'Encode_K562_GATA1 = "https://www.encodeproject.org/files/ENCFF632NQI/@@download/ENCFF632NQI.bed.gz", Encode_GM12878_CEBPB = "https://www.encodeproject.org/files/ENCFF761MGJ/@@download/ENCFF761MGJ.bed.gz", Encode_K562_Ebf1 = "https://www.encodeproject.org/files/ENCFF868VSY/@@download/ENCFF868VSY.bed.gz", Encode_K562_Pax5 = "https://www.encodeproject.org/files/ENCFF339KUO/@@download/ENCFF339KUO.bed.gz"'
        }
        'archr_motif_deviations_clusters2' {
          args = 'motifSet = "cisbp"'
            // if 'custom', must provide custom PWMatrixList using 'motifPWMs' params, e.g. 'motifSet = "cisbp", motifPWMs = "full_path_to_PWMatrixList"'
            // on how to create PWMatrixList: https://github.com/hukai916/scATACpipe_example/tree/main/PWMatrixList

          motifs = 'default'
          // motifs = 'GATA1, CEBPA, EBF1, IRF4, TBX21, PAX5'

          custom_peaks = 'default'
        }
        'archr_footprinting_clusters' {
          args = 'addDOC = FALSE, smoothWindow = 5'
          motifs = 'default' // by default, first 3 will be analyzed
          // motifs = 'GATA1, CEBPA, EBF1, IRF4, TBX21, PAX5'
          norm_method = 'Subtract'
          tss_norm_method = 'None'
          tss_flank = 2000
          flank_norm = 100
        }
        'archr_footprinting_clusters2' {
          args = 'addDOC = FALSE, smoothWindow = 5'
          motifs = 'default' // by default, the first 3 will be plotted
          // motifs = 'GATA1, CEBPA, EBF1, IRF4, TBX21, PAX5'
          norm_method = 'Subtract'
          tss_norm_method = 'None'
          tss_flank = 2000
          flank_norm = 100
        }
        'archr_coaccessibility_clusters' {
          args  = 'corCutOff = 0.5, resolution = 10000'
          marker_genes   = 'default' // by default, the first 3 will be plotted
          // marker_genes = 'CD34, GATA1, PAX5, MS4A1, CD14, CD3D, CD8A, TBX21, IL7R'
        }
        'archr_coaccessibility_clusters2' {
          args  = 'corCutOff = 0.5, resolution = 10000'
          marker_genes   = 'default' // by default, the first 3 will be plotted
          // marker_genes = 'CD34, GATA1, PAX5, MS4A1, CD14, CD3D, CD8A, TBX21, IL7R'
        }
        'archr_peak2genelinkage_clusters2' {
          args  = 'corCutOff = 0.45, resolution = 1000'
          marker_genes = 'default' // by default, the first 3 will be plotted
          // marker_genes = 'CD34, GATA1, PAX5, MS4A1, CD14'
        }
        'archr_get_positive_tf_regulator_clusters' {
          args  = ''
        }
        'archr_get_positive_tf_regulator_clusters2' {
          args  = ''
        }
        'archr_trajectory_clusters2' {
          trajectory_name = 'default' // pick a name for your trajectory plotting
          trajectory_groups = 'default' // by default, use the first 3 groups, since the order matters, this may not make any biological sense at all.
          // trajectory_groups = '01_HSC, 08_GMP.Neut, 11_CD14.Mono.1'

          colorby_gene = 'default' // by default, will use .getFeatureDF()[1]
        }
        'archr_get_clustering_tsv' {
          args = ''
        }
        'split_bed' {
          args = ''
        }
        'split_bam' {
          barcode_regex = '' // default to '' meaning that CB tag will be used, which stores the corrected barcodes
          bam_coverage  = '--binSize 10 --normalizeUsing CPM --effectiveGenomeSize 1369631918' // For effectiveGenomeSize, see https://deeptools.readthedocs.io/en/develop/content/feature/effectiveGenomeSize.html
        }
    }
}
